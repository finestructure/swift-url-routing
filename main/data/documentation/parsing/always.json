{"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To","type":"conformsTo"}],"sections":[],"metadata":{"roleHeading":"Structure","externalID":"s:7Parsing6AlwaysV","symbolKind":"struct","modules":[{"name":"Parsing"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"navigatorTitle":[{"text":"Always","kind":"identifier"}],"role":"symbol","title":"Always"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">"}],"platforms":["Linux"],"languages":["swift"]}]},{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"While not very useful on its own, the "},{"type":"codeVoice","code":"Always"},{"type":"text","text":" parser can be helpful when combined with other"},{"type":"text","text":" "},{"type":"text","text":"parsers or operators."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When its "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Void"},{"type":"text","text":", it can be used as a “no-op” parser of sorts and be plugged into"},{"type":"text","text":" "},{"type":"text","text":"other parser operations. For example, the "},{"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Many","isActive":true},{"type":"text","text":" parser can be configured with separator and"},{"type":"text","text":" "},{"type":"text","text":"terminator parsers:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Many {","  Int.parser()","} separator: {","  \",\"","} terminator: {","  End()","}"]},{"inlineContent":[{"type":"text","text":"But also exposes initializers that omit these parsers when there is no separator or terminator"},{"type":"text","text":" "},{"type":"text","text":"to be parsed:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","}"]},{"inlineContent":[{"text":"To support this, ","type":"text"},{"code":"Many","type":"codeVoice"},{"text":" plugs ","type":"text"},{"code":"Always<Input, Void>","type":"codeVoice"},{"text":" into each omitted parser. As a simplified","type":"text"},{"text":" ","type":"text"},{"text":"example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct Many<Element: Parser, Separator: Parser, Terminator: Parser>: Parser","where Separator.Input == Element.Input, Terminator.Input == Element.Input {","  ...","}","","extension Many where Separator == Always<Input, Void>, Terminator == Always<Input, Void> {","  init(@ParserBuilder element: () -> Element) {","    self.element = element()","    self.separator = Always(())","    self.terminator = Always(())","  }","}"]},{"inlineContent":[{"type":"text","text":"This means the previous example is equivalent to:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","} separator: {","  Always(())","} terminator: {","  Always(())","}"]},{"content":[{"inlineContent":[{"text":"While ","type":"text"},{"type":"codeVoice","code":"Always"},{"text":" can be used as the last alternative of a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" to specify a default","type":"text"},{"text":" ","type":"text"},{"text":"output, the resulting parser will be throwing. Instead, prefer ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser\/replaceError(with:)","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which returns a non-throwing parser.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/parsing\/always"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/output"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/parse(_:)","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/print(_:into:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations"],"title":"Default Implementations"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Many":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"title":"Many","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Many","type":"topic","url":"\/documentation\/parsing\/many"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/init(_:)-56hez":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/always\/init(_:)-56hez","type":"topic","title":"init(_:)","abstract":[],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/ParserPrinter-Implementations":{"title":"ParserPrinter Implementations","url":"\/documentation\/parsing\/always\/parserprinter-implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations","role":"collectionGroup","type":"topic","abstract":[],"kind":"article"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"abstract":[{"type":"text","text":"A "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","url":"\/documentation\/parsing\/parserprinter","role":"symbol","title":"ParserPrinter","kind":"symbol","type":"topic","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","role":"collection","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/init(_:)-fdjh":{"kind":"symbol","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Substring.UTF8View","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/parsing\/always\/init(_:)-fdjh","abstract":[],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh","title":"init(_:)","role":"symbol","type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"title":"Parser","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","url":"\/documentation\/parsing\/parser","role":"symbol","type":"topic","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/print(_:into:)":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/print(_:into:)","url":"\/documentation\/parsing\/always\/print(_:into:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","role":"symbol","kind":"symbol","title":"print(_:into:)","abstract":[{"text":"Attempts to print a well-structured piece of data into something more nebulous.","type":"text"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf":{"type":"topic","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"url":"\/documentation\/parsing\/oneof","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"title":"OneOf","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/Parser-Implementations":{"url":"\/documentation\/parsing\/always\/parser-implementations","abstract":[],"role":"collectionGroup","type":"topic","title":"Parser Implementations","kind":"article","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/Parser-Implementations"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/parse(_:)":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"text":"Output","kind":"typeIdentifier"}],"type":"topic","title":"parse(_:)","role":"symbol","url":"\/documentation\/parsing\/always\/parse(_:)","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/output":{"abstract":[],"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"output","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"title":"output","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/output","url":"\/documentation\/parsing\/always\/output","role":"symbol","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/init(_:)-2spg2":{"abstract":[],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","kind":"symbol","type":"topic","title":"init(_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"url":"\/documentation\/parsing\/always\/init(_:)-2spg2"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always":{"title":"Always","url":"\/documentation\/parsing\/always","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"navigatorTitle":[{"text":"Always","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser/replaceError(with:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"ReplaceError","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","kind":"symbol","title":"replaceError(with:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser\/replaceError(with:)","url":"\/documentation\/parsing\/parser\/replaceerror(with:)","abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"role":"symbol"}}}