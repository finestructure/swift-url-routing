{"topicSections":[{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream\/init(build:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream\/parsers"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream\/parse(_:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream\/Parser-Implementations"],"title":"Default Implementations"}],"kind":"symbol","variants":[{"paths":["\/documentation\/parsing\/stream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream","interfaceLanguage":"swift"},"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"],"kind":"relationships","title":"Conforms To"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Parsing6ParserP","text":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sm","text":"RangeReplaceableCollection","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}]},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following parser can parse an integer followed by a newline from a collection"},{"type":"text","text":" "},{"type":"text","text":"of UTF8 bytes:"}]},{"type":"codeListing","syntax":"swift","code":["Parse {","  Int.parser(of: ArraySlice<UInt8>.self)","  StartsWith(\"\\n\".utf8)","}"]},{"type":"paragraph","inlineContent":[{"text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Stream {","  Parse {","    Int.parser(of: ArraySlice<UInt8>.self)","    StartsWith(\"\\n\".utf8)","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"And then it can be used on a stream, such as values coming from standard in:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","try newlineSeparatedIntegers.parse(&stdin)"]}],"kind":"content"}],"metadata":{"navigatorTitle":[{"text":"Stream","kind":"identifier"}],"symbolKind":"struct","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing6StreamV","title":"Stream"},"abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Stream/parse(_:)":{"title":"parse(_:)","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream\/parse(_:)","url":"\/documentation\/parsing\/stream\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyIterator","preciseIdentifier":"s:s11AnyIteratorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"]","kind":"text"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Stream/Parser-Implementations":{"url":"\/documentation\/parsing\/stream\/parser-implementations","role":"collectionGroup","abstract":[],"type":"topic","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream\/Parser-Implementations","kind":"article"},"doc://co.pointfree.URLRouting/documentation/Parsing/Stream/parsers":{"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parsers","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"}],"role":"symbol","abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream\/parsers","url":"\/documentation\/parsing\/stream\/parsers","title":"parsers"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"title":"Parser","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","url":"\/documentation\/parsing\/parser","role":"symbol","type":"topic","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Stream":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}],"url":"\/documentation\/parsing\/stream","role":"symbol","abstract":[{"text":"A parser that can parse streams of input.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Stream"}],"title":"Stream","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","role":"collection","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/Stream/init(build:)":{"abstract":[],"url":"\/documentation\/parsing\/stream\/init(build:)","role":"symbol","kind":"symbol","type":"topic","title":"init(build:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"build"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Stream\/init(build:)"}}}