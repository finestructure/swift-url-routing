{"kind":"symbol","metadata":{"symbolKind":"method","extendedModule":"Parsing","title":"memberwise(_:)","roleHeading":"Type Method","modules":[{"name":"Parsing"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO18FromLosslessStringV"},"abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"variants":[{"paths":["\/documentation\/parsing\/conversions\/fromlosslessstring\/memberwise(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"initializer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"preciseIdentifier":"s:7Parsing11ConversionsO","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions","text":"Conversions","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Memberwise","text":"Memberwise","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}]},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A conversion that can embed a tuple of values into a struct, and destructure a"},{"type":"text","text":" "},{"type":"text","text":"struct back into a tuple of values."}]}],"kind":"content"},{"kind":"parameters","parameters":[{"name":"initializer","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A memberwise initializer where "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" directly maps to the memory"},{"type":"text","text":" "},{"type":"text","text":"layout of "},{"type":"codeVoice","code":"Root"},{"type":"text","text":", for example the internal, default initializer that is automatically"},{"type":"text","text":" "},{"type":"text","text":"synthesized for structs."}]}]}]},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Useful for transforming the output of a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","type":"reference","isActive":true},{"text":" into a struct.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, given a simple "},{"type":"codeVoice","code":"Coordinate"},{"type":"text","text":" struct, we can build a parser-printer using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""]},{"type":"paragraph","inlineContent":[{"text":"To transform the output of a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"},{"text":" into an enum, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7"},{"text":".","type":"text"}]},{"text":"Careful usage","anchor":"Careful-usage","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"This conversion works by using the memberwise initializer you supply to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)"},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"order to turn tuples into a struct, and it uses ","type":"text"},{"code":"unsafeBitcast","type":"codeVoice"},{"text":" to turn the struct back into","type":"text"},{"text":" ","type":"text"},{"text":"a tuple. Because of this, it is ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" valid to use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)"},{"text":" with anything other than","type":"text"},{"text":" ","type":"text"},{"text":"the default synthesized memberwise initializer that structs are given for free by the compiler","type":"text"},{"text":" ","type":"text"},{"text":"as that function most correctly maps the data inside a struct to its tuple representation,","type":"text"},{"text":" ","type":"text"},{"text":"even enforcing the order of the fields.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into","type":"text"},{"text":" ","type":"text"},{"text":"your parser-printer and potentially causing crashes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose we provided an alternative initializer to "},{"type":"codeVoice","code":"Coordinate"},{"type":"text","text":" above that"},{"type":"text","text":" "},{"type":"text","text":"allowed you to create a coordinate from a radius and angle measured in degrees:"}]},{"type":"codeListing","syntax":"swift","code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This may seem innocent enough, but it is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" safe to use this initializer with"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)","type":"reference"},{"type":"text","text":". The following parser-printer will correctly parse a radius and angle into"},{"type":"text","text":" "},{"type":"text","text":"an x\/y coordinate:"}]},{"type":"codeListing","syntax":"swift","code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"]},{"type":"paragraph","inlineContent":[{"text":"However, printing a coordinate will ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" convert it back into a radius and angle, and","type":"text"},{"text":" ","type":"text"},{"text":"instead will erroneously use (0, 1) as the radius and angle:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""]},{"type":"paragraph","inlineContent":[{"text":"This means this parser-printer does not round trip (see ","type":"text"},{"text":"doc:Roundtripping","type":"text"},{"text":"), ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"text":" if we","type":"text"},{"text":" ","type":"text"},{"text":"parse and input and then print that output we do not get back the original input we started","type":"text"},{"text":" ","type":"text"},{"text":"with:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"]},{"type":"paragraph","inlineContent":[{"text":"Further, it is possible to provide a custom initializer for a type that either re-orders the","type":"text"},{"text":" ","type":"text"},{"text":"fields or add\/removes fields, both of which will cause the underlying ","type":"text"},{"code":"unsafeBitCast","type":"codeVoice"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"crash. For example, we could have a ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" struct that holds onto a string for the bio and an","type":"text"},{"text":" ","type":"text"},{"text":"integer for the id, and provide a custom initializer so that the id is provided first:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"However, using this initializer with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)","type":"reference"},{"text":" will cause printing to crash because","type":"text"},{"text":" ","type":"text"},{"text":"it will try to bitcast a ","type":"text"},{"code":"(String, Int)","type":"codeVoice"},{"text":" struct into a ","type":"text"},{"code":"(Int, String)","type":"codeVoice"},{"text":" tuple:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)"},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString\/Conversion-Implementations"]]},"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/FromLosslessString":{"title":"Conversions.FromLosslessString","type":"topic","url":"\/documentation\/parsing\/conversions\/fromlosslessstring","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString","abstract":[{"text":"A conversion from a string to a lossless string-convertible type.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"FromLosslessString"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromLosslessString"}]},"doc://co.pointfree.URLRouting/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","role":"collection","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/FromLosslessString/memberwise(_:)":{"title":"memberwise(_:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)","url":"\/documentation\/parsing\/conversions\/fromlosslessstring\/memberwise(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"title":"Parser","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","url":"\/documentation\/parsing\/parser","role":"symbol","type":"topic","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions":{"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions","abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"title":"Conversions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}],"url":"\/documentation\/parsing\/conversions","kind":"symbol","type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"abstract":[{"type":"text","text":"A "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","url":"\/documentation\/parsing\/parserprinter","role":"symbol","title":"ParserPrinter","kind":"symbol","type":"topic","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversion/case(_:)-4j2n7":{"kind":"symbol","title":"case(_:)","url":"\/documentation\/parsing\/conversion\/case(_:)-4j2n7","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","abstract":[{"text":"Converts the associated values of an enum case into the case, and an enum case into its","type":"text"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/FromLosslessString/Conversion-Implementations":{"type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FromLosslessString\/Conversion-Implementations","title":"Conversion Implementations","url":"\/documentation\/parsing\/conversions\/fromlosslessstring\/conversion-implementations","abstract":[],"role":"collectionGroup"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/Memberwise":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Memberwise","kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/conversions\/memberwise","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"Memberwise"}],"title":"Conversions.Memberwise","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Memberwise"}]}}}